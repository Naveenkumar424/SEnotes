Syllabus:
    Introduction, Software engineering ethics; Software process models; Process activities; 
    Coping with change; Agile software development: Agile methods; Plan-driven and agile development.

Software Engineering:
    Software engineering is the discipline of designing, developing, testing, and maintaining software systems.

Key aspects of Software Engineering:
    Requirements Analysis: 
        Understanding and documenting what the user needs from the software.
    Design:
        Creating a blueprint for the system, including architecture, components, and interfaces.
    Implementation:
        Writing the actual code based on the design.
    Testing:
        Verifying that the software works as intended, including unit tests, integration tests, and system tests.
    Maintenance:
        Ongoing support and improvement after the software is deployed, including bug fixes and updates.
    Project Management:
        Planning, scheduling, and managing resources to complete the software project efficiently.



Software process model:

### 1. Waterfall Model
**Explanation**: The Waterfall model is a linear and sequential approach where each phase must be completed before moving on to the next. Itâ€™s like a cascade of steps.

**Data Flow Diagram**:
```
+--------------------+
|  Requirements      |
+--------------------+
          |
          v
+--------------------+
|    Design          |
+--------------------+
          |
          v
+--------------------+
|  Implementation    |
+--------------------+
          |
          v
+--------------------+
|     Testing        |
+--------------------+
          |
          v
+--------------------+
|   Deployment       |
+--------------------+
          |
          v
+--------------------+
|   Maintenance      |
+--------------------+
```

### 2. Incremental Model
**Explanation**: The Incremental model develops the system through small, incremental parts called increments. Each increment adds functionality until the complete system is delivered.

**Data Flow Diagram**:
```
+--------------------+
| Initial Planning   |
+--------------------+
          |
          v
+--------------------+
|     Increment 1    |
| (Requirements,     |
|  Design, Implement,|
|  Test)             |
+--------------------+
          |
          v
+--------------------+
|     Increment 2    |
| (Repeat steps)     |
+--------------------+
          |
          v
+--------------------+
|     Increment N    |
| (Final Deployment  |
|   and Maintenance) |
+--------------------+
```

### 3. Spiral Model
**Explanation**: The Spiral model combines iterative development with systematic aspects of the Waterfall model. It focuses on risk assessment at each phase.

**Data Flow Diagram**:
```
+---------------------------+
| Objective Setting         |
+---------------------------+
          |
          v
+---------------------------+
| Risk Assessment and       |
|    Reduction              |
+---------------------------+
          |
          v
+---------------------------+
|  Development and Testing  |
+---------------------------+
          |
          v
+---------------------------+
| Planning for the Next     |
|       Iteration           |
+---------------------------+
```

### 4. Prototype Model
**Explanation**: The Prototype model involves creating a prototype of the software to demonstrate functionality before developing the actual system. It helps gather user feedback early.

**Data Flow Diagram**:
```
+--------------------+
| Requirements       |
+--------------------+
          |
          v
+--------------------+
|   Quick Design     |
+--------------------+
          |
          v
+--------------------+
|  Build Prototype   |
+--------------------+
          |
          v
+--------------------+
|  User Evaluation   |
+--------------------+
          |
          v
+--------------------+
|Refine Requirements |
+--------------------+
          |
          v
+--------------------+
|   Design and       |
| Implementation     |
+--------------------+
          |
          v
+--------------------+
|     System Testing |
+--------------------+
          |
          v
+--------------------+
|      Final System  |
+--------------------+
```

### 5. RAD Model (Rapid Application Development)
**Explanation**: The RAD model focuses on quick development and user feedback, using prototypes and iterative development to produce high-quality systems in a short time.

**Data Flow Diagram**:
```
+--------------------+
|    Requirements    |
+--------------------+
          |
          v
+--------------------+
|    User Design     |
| (Prototypes)       |
+--------------------+
          |
          v
+--------------------+
|   Rapid Development|
+--------------------+
          |
          v
+--------------------+
|  Testing and       |
|   Refinement       |
+--------------------+
          |
          v
+--------------------+
| Implementation and |
| Deployment         |
+--------------------+
```

Coping with change:
    Coping with change is a critical aspect of software development. Given the dynamic nature of technology
and evolving user requirements.
Ex:Agile computing ,Continious Integration/Continious Development(CI/CD),Version control System(Git)